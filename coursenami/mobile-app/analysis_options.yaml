

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
# Basically if the rules are fulfilled, the linter will not display any exceptions or errors.
#  But if there are certain rules that fail to match, the linter displays error in both the terminal and destination where the code is situated.
include: package:flutter_lints/flutter.yaml
analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    missing_required_param: warning
    missing_return: warning
    todo: ignore
    deprecated_member_use_from_same_package: ignore
    sdk_version_async_exported_from_core: ignore
    always_require_non_null_named_parameters: false
    invalid_assignment: ignore
  exclude:
    - '**/*.g.dart'


linter:
  rules:
   # The following list of rules are all from the available lints located under the following repo.
    # https://github.com/dart-lang/linter/blob/master/example/all.yaml
    - always_declare_return_types
    - always_put_control_body_on_new_line
    # - always_put_required_named_parameters_first  //this can be changed in the future.
    - always_require_non_null_named_parameters
    - always_specify_types
    # - always_use_package_imports // This is done mostly in our cases.
    - annotate_overrides
    # - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    # - avoid_catches_without_on_clauses
    # - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    # - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    # - avoid_escaping_inner_quotes
    # - avoid_field_initializers_in_const_classes
    # - avoid_final_parameters
    # - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    # - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    # - avoid_positional_boolean_parameters
    # - avoid_print
    # - avoid_private_typedef_functions //some private tydefs can be used
    # - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    # - avoid_returning_null //This can be enabled in the future if needed
    - avoid_returning_null_for_future
    - avoid_returning_null_for_void
    # - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    # - avoid_types_on_closure_parameters //incompatible with always_specify_types
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    # - avoid_web_libraries_in_flutter //We might use this in the project
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cancel_subscriptions
    # - cascade_invocations
    - cast_nullable_to_non_nullable
    # - close_sinks
    # - comment_references
    # - conditional_uri_does_not_exist
    # - constant_identifier_names
    - control_flow_in_finally
    - deprecated_consistency
    # - diagnostic_describe_all_properties
    - directives_ordering
    # - do_not_use_environment //Maybe used outside lib in the testing
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - hash_and_equals
    # - implementation_imports
    - iterable_contains_unrelated_type
    - library_names
    - library_prefixes
    - list_remove_unrelated_type
    # - literal_only_boolean_expressions
    - missing_whitespace_between_adjacent_strings
    - no_adjacent_strings_in_list
    # - no_default_cases
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    # - no_leading_underscores_for_local_identifiers
    - no_logic_in_create_state
    # - no_runtimeType_toString
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    # - omit_local_variable_types //Not compatible with always specify types
    # - one_member_abstracts
    # - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    # - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    # - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_single_quotes
    # - prefer_double_quotes //opposite of single_quote
    - prefer_equal_for_default_values
    # - prefer_expression_function_bodies
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    # - prefer_final_parameters
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    # - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    # - prefer_int_literals
    # - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    # - prefer_mixin
    # - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_relative_imports
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    # - public_member_api_docs
    - recursive_getters
    # - require_trailing_commas
    - secure_pubspec_urls
    # - sized_box_for_whitespace
    # - sized_box_shrink_expand
    - slash_for_doc_comments
    # - sort_child_properties_last
    # - sort_constructors_first
    # - sort_pub_dependencies //sorting for pub files
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_init_formals
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    # - unnecessary_final //incompatible with final_locals
    - unnecessary_getters_setters
    - no_runtimeType_toString
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unrelated_type_equality_checks
    - unsafe_html
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    # - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    # - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    # - use_string_buffers
    - use_super_parameters
    - use_test_throws_matchers
    # - use_to_and_as_if_applicable
    - valid_regexps
    - void_checks